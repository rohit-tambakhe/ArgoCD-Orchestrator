spring:
  application:
    name: argocd-orchestrator
    
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:argocd_orchestrator}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
          fetch_size: 20
          
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: 0
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: -1ms
        
  # Flyway Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    
  # Security Configuration
  security:
    user:
      name: ${ADMIN_USERNAME:admin}
      password: ${ADMIN_PASSWORD:admin123}
      
  # Actuator Configuration
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics,prometheus,env,configprops
    endpoint:
      health:
        show-details: when-authorized
    metrics:
      export:
        prometheus:
          enabled: true
    server:
      port: 8081

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /api/v1

# Logging Configuration
logging:
  level:
    com.rtte.argocd.orchestrator: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/argocd-orchestrator.log
    max-size: 100MB
    max-history: 30

# ArgoCD Configuration
argocd:
  server-url: ${ARGOCD_SERVER_URL:https://argocd.example.com}
  username: ${ARGOCD_USERNAME:admin}
  password: ${ARGOCD_PASSWORD:admin123}
  insecure: ${ARGOCD_INSECURE:false}
  timeout: 30s
  application-set:
    enabled: true
    namespace: argocd
  environments:
    - name: development
      namespace: argocd-dev
      default-strategy: ROLLING_UPDATE
      approval-required: false
    - name: staging
      namespace: argocd-staging
      default-strategy: BLUE_GREEN
      approval-required: true
    - name: production
      namespace: argocd
      default-strategy: BLUE_GREEN
      approval-required: true
      allowed-hours: ["09:00", "17:00"]

# GitHub Configuration
github:
  token: ${GITHUB_TOKEN:}
  webhook-secret: ${GITHUB_WEBHOOK_SECRET:}
  api-url: https://api.github.com
  timeout: 30s

# CAC Configuration
cac:
  repository-url: ${CAC_REPOSITORY_URL:https://github.com/rtte/cac-configs}
  branch: ${CAC_BRANCH:main}
  config-path: ${CAC_CONFIG_PATH:customers}
  ssh-key-path: ${CAC_SSH_KEY_PATH:/secrets/git-ssh-key}
  username: ${CAC_USERNAME:}
  password: ${CAC_PASSWORD:}
  validation:
    enabled: ${CAC_VALIDATION_ENABLED:true}
    schema-path: ${CAC_SCHEMA_PATH:schemas/customer-config.yaml}
    strict-mode: ${CAC_STRICT_MODE:false}
  cache:
    ttl-minutes: ${CAC_CACHE_TTL:5}
    max-size: ${CAC_CACHE_MAX_SIZE:1000}

# Helm Configuration
helm:
  chart-repository: ${HELM_CHART_REPOSITORY:https://rtte.github.io/helm-charts}
  cache-dir: ${HELM_CACHE_DIR:/tmp/helm-cache}
  timeout: ${HELM_TIMEOUT:10m}
  atomic: ${HELM_ATOMIC:true}
  wait: ${HELM_WAIT:true}
  wait-for-jobs: ${HELM_WAIT_FOR_JOBS:true}

# Kubernetes Configuration
kubernetes:
  master-url: ${KUBERNETES_MASTER_URL:https://kubernetes.default.svc}
  namespace: ${KUBERNETES_NAMESPACE:argocd-orchestrator}
  service-account: ${KUBERNETES_SERVICE_ACCOUNT:argocd-orchestrator}
  config-path: ${KUBECONFIG:}
  trust-certificates: ${KUBERNETES_TRUST_CERTS:true}

# StatefulSet Configuration
orchestrator:
  pod-name: ${POD_NAME:argocd-orchestrator-0}
  pod-namespace: ${POD_NAMESPACE:argocd-orchestrator}
  leader-election:
    enabled: ${LEADER_ELECTION_ENABLED:true}
    lease-duration: ${LEADER_ELECTION_LEASE_DURATION:15s}
    renew-deadline: ${LEADER_ELECTION_RENEW_DEADLINE:10s}
    retry-period: ${LEADER_ELECTION_RETRY_PERIOD:2s}
  sync:
    interval: ${SYNC_INTERVAL:300000} # 5 minutes
  state:
    storage-path: ${STATE_STORAGE_PATH:/data/state}
    backup-enabled: ${STATE_BACKUP_ENABLED:true}
    backup-interval: ${STATE_BACKUP_INTERVAL:3600000} # 1 hour

# Monitoring Configuration
monitoring:
  metrics:
    enabled: true
    prefix: argocd_orchestrator
  tracing:
    enabled: ${TRACING_ENABLED:false}
    jaeger:
      endpoint: ${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# API Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
  info:
    title: ArgoCD Orchestrator API
    description: Comprehensive ArgoCD orchestrator with CAC integration for rtte
    version: 1.0.0
    contact:
      name: rtte
      email: dev@rtte.com

# Cache Configuration
cache:
  customer-configs:
    ttl: ${CACHE_CUSTOMER_CONFIGS_TTL:300} # 5 minutes
    max-size: ${CACHE_CUSTOMER_CONFIGS_MAX_SIZE:1000}
  deployment-status:
    ttl: ${CACHE_DEPLOYMENT_STATUS_TTL:60} # 1 minute
    max-size: ${CACHE_DEPLOYMENT_STATUS_MAX_SIZE:500}

# Security Headers
security:
  headers:
    enabled: true
    hsts: true
    content-security-policy: "default-src 'self'"
    x-frame-options: DENY
    x-content-type-options: nosniff
    x-xss-protection: "1; mode=block" 